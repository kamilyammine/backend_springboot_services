
-- user is a keyword, so use cf_user
create table if not exists cf_user
(
    id                                  int not null generated by default as identity,
    username                            text not null,
    password                            text not null,
    enabled                             boolean default true,
    change_pw_required                  boolean default true,
    constraint pk_wb_user primary key(id)
);
create unique index if not exists uk_user_username ON cf_user (username);

-- Insert record for super admin user
insert into cf_user
(username, enabled, change_pw_required, password)
select 'sadmin', true, false,
'$argon2id$v=19$m=4096,t=3,p=1$CkX1z77TFsxq2bEzwIqb5A$iKGvfROuRe21uhnZG5mM28y264I2eoNU5uAQPh/Twko'
where not exists (select 1 from cf_user where username = 'sadmin');

create table if not exists role
(
    id                                  int not null generated by default as identity (start with 4 increment by 1),
    name                                text not null,
    description                         text,
    system_role                         boolean default false,
    constraint pk_role primary key(id)
);

-- Insert super-admin role
insert into role
select 1, 'SUPER-ADMIN', 'The super admin role', true where not exists
(select 1 from role where id = 1);

-- Insert admin role
insert into role
select 2, 'ADMIN', 'The admin role', true where not exists
(select 1 from role where id = 2);

create table if not exists permission
(
    id                                  int not null generated by default as identity (start with 101 increment by 1),
    name                                text not null,
    description                         text not null,
    constraint pk_permission primary key(id)
);

-- Insert super-admin permission
insert into permission
select 1, 'SUPER-ADMIN', 'The super admin permission' where not exists
(select 1 from permission where id = 1);

-- Insert admin permission
insert into permission
select 2, 'ADMIN', 'The admin permission' where not exists
(select 1 from permission where id = 2);

create table if not exists user_role
(
    user_id                             int not null,
    role_id                             int not null,
    constraint pk_user_role primary key(user_id, role_id),
    constraint fk_user_role_user foreign key (user_id) references cf_user (id) on delete cascade,
    constraint fk_user_role_role foreign key (role_id) references role (id) on delete cascade
);

-- assign the role of super-admin to the super-admin user
insert into user_role select 1, 1 where not exists
(select 1 from user_role where user_id = 1 and role_id = 1);

create table if not exists role_permission
(
    role_id                             int not null,
    permission_id                       int not null,
    primary key(role_id, permission_id),
    constraint fk_role_permission_role foreign key (role_id) references role (id) on delete cascade,
    constraint fk_role_permission_permission foreign key (permission_id) references permission (id) on delete cascade
);

-- assign the super-admin permission to the super-admin role
insert into role_permission select 1, 1 where not exists
(select 1 from role_permission where role_id = 1 and permission_id = 1);

-- assign the admin permission to the admin role
insert into role_permission select 2, 2 where not exists
(select 1 from role_permission where role_id = 2 and permission_id = 2);

create table if not exists x_shared_secret
(
    id                                  int not null generated by default as identity,
    create_datetime                     timestamp with time zone default now(),
    key                                 text not null,
    constraint pk_x_shared_secret primary key(id)
);

create table if not exists session
(
    username                            text not null,
    consecutive_refreshes               int not null,
    access_token                        text not null,
    refresh_token                       text not null,
    create_datetime                     timestamp with time zone default now(),
    constraint pk_session primary key(username)
);
create index if not exists idx_session_access_token ON session (access_token);
create index if not exists idx_session_refresh_token ON session (refresh_token);

create table if not exists failed_login
(
    user_id                             int not null,
    consecutive_fail_count              int not null,
    update_timestamp                    timestamp with time zone default now(),
    constraint pk_failed_login primary key(user_id)
);

create table if not exists person
(
    id                      			int not null, --will always be the same as cf_user.id
    first_name              			text not null,
    last_name               			text not null,
    email_address           			text not null,
    constraint pk_person primary key(id),
	constraint fk_person_cf_user foreign key (id) references cf_user (id) on delete cascade on update cascade
);
create unique index if not exists uk_person_email_address on person (email_address);